plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT' apply(false)
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT' apply(false)
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    version = "${minecraft_version}-${mod_version}"

    configurations {
        library
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_id}" }
        }
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_id}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CraftTweaker / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            name = "MrCrayfish (GitHub)"
            url = "https://maven.pkg.github.com/MrCrayfish/Maven"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
            }
            content {
                includeGroup "com.mrcrayfish"
            }
        }
        if (!System.getenv("CI")) {
            maven {
                url "file://" + System.getenv("LOCAL_MAVEN")
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        def expandProps = [
            "minecraft_version": minecraft_version,
            "forge_version": forge_version,
            "fabric_version": fabric_version,
            "fabric_loader_version": fabric_loader_version,
            "framework_version": framework_version,
            "refurbished_furniture_version": refurbished_furniture,
            "mod_name": mod_name,
            "mod_version": mod_version,
            "mod_author": mod_author,
            "mod_id": mod_id,
            "mod_license": mod_license,
            "mod_desc": mod_desc,
            "mod_homepage": mod_homepage,
            "mod_source": mod_source,
            "mod_issues": mod_issues
        ]
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
        inputs.properties(expandProps)
        exclude ".cache" // Remove cache from generated data
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}

def incrementBuild(path) {
    var buildFile = file(path);
    int version = buildFile.text.toInteger()
    buildFile.text = version + 1
}

tasks.register('incrementBuilds') {
    doLast {
        incrementBuild('/release_build_common');
        incrementBuild('/release_build_forge');
        incrementBuild('/release_build_fabric');
    }
}